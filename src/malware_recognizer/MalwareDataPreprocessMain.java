package malware_recognizer;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import org.junit.jupiter.api.Test;

import hmm.*;

class MalwareDataPreprocessMain {

	@Test
	void test() {
		MalwarePreprocessor pp = MalwarePreprocessor.getPreprocessor();
		Serializer s = Serializer.getSerializer();
		String baseFamily = "zbot";					// EDIT THIS
		String family1 = "zeroaccess";				// EDIT THIS
		String family2 = "winwebsec";				// EDIT THIS
				
		// Adjustable hyper-parameters
		int M = 100;	// numSymbols
		int T = 1500;	// observationSeqLength
		
		// Adjustable hyper-parameters for testing.
		String BASE_DICT_PATH = "./processed_datasets/" + baseFamily + "/M" + M + "_T" + T + "_dict.txt";
		String BASE_MALWARE_PATH = "./malware_datasets/" + baseFamily;
		String DIFF_MALWARE_PATH_1 = "./malware_datasets/" + family1;
		String DIFF_MALWARE_PATH_2 = "./malware_datasets/" + family2;	
		String BASE_SAVE_FILE = "./processed_datasets/" + baseFamily + "/M" + M + "_T" + T + ".txt";
		String DIFF_SAVE_FILE_1 = "./processed_datasets/" + baseFamily + "/" + family1 + "_on_M" + M + "_T" + T + ".txt";
		String DIFF_SAVE_FILE_2 = "./processed_datasets/" + baseFamily + "/" + family2 + "_on_M" + M + "_T" + T + ".txt";
		
		Map<String, Integer> dict = null;
		int[][] observations = null;
		try {
			dict = pp.getSymbolMappings(BASE_MALWARE_PATH, M);
			observations = pp.getObservationSequences(BASE_MALWARE_PATH, dict, T);
			s.serializeDataset(observations, BASE_SAVE_FILE, false);
			s.serializeMapping(dict, BASE_DICT_PATH, false);
			
			// Print observations.
			new ArrayPrinter().printString(observations);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// Load our data-sets from the other malware families using our dictionary.
		try {
			int[][] oS1 = pp.getObservationSequences(DIFF_MALWARE_PATH_1, dict, T);
			int[][] oS2 = pp.getObservationSequences(DIFF_MALWARE_PATH_2, dict, T);
			s.serializeDataset(oS1, DIFF_SAVE_FILE_1, false);
			s.serializeDataset(oS2, DIFF_SAVE_FILE_2, false);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Done.");
	}
}
