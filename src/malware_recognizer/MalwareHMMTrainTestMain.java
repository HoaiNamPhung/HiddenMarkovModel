package malware_recognizer;

import java.io.FileWriter;
import java.util.Arrays;
import java.util.Map;
import org.junit.jupiter.api.Test;

import hmm.*;

class MalwareHMMTrainTestMain {

	@Test
	void test() throws Exception {
		
		/* =================== PARAMS ===================== */
		
		// Hyper-parameters
		int N = 6;
		int M = 100;
		int T = 1500;
		int maxIters = 150;
		int numTestSets = 300;		
		
		// File parameters.
		String baseFamily = "zbot";								// EDIT THIS
		String family1 = "zeroaccess";							// EDIT THIS
		String family2 = "winwebsec";							// EDIT THIS
		
		/* ===================== TRAIN ====================== */
		
		// Load our dataset and dictionary.
		Serializer s = Serializer.getSerializer();
		String DATASET_PATH = "./processed_datasets/" + baseFamily + "/M" + M + "_T" + T + ".txt";
		String DIFF_DATA_PATH_1 = "./processed_datasets/" + baseFamily + "/" + family1 + "_on_M" + M + "_T" + T + ".txt";
		String DIFF_DATA_PATH_2 = "./processed_datasets/" + baseFamily + "/" + family2 + "_on_M" + M + "_T" + T + ".txt";
		String TEST_RESULTS_PATH_BASE = "./test_outputs/" + baseFamily + "/" + baseFamily + "_on_M" + M + "_T" + T + "_testoutput.csv";
		String TEST_RESULTS_PATH_1 = "./test_outputs/" + baseFamily + "/" + family1 + "_on_M" + M + "_T" + T + "_testoutput.csv";
		String TEST_RESULTS_PATH_2 = "./test_outputs/" + baseFamily + "/" + family2 + "_on_M" + M + "_T" + T + "_testoutput.csv";
		String DICT_PATH = "./processed_datasets/" + baseFamily + "/M" + M + "_T" + T + "_dict.txt";
		int[][] Os = s.deserializeDataset(DATASET_PATH);
		Map<String, Integer> dict = s.deserializeMapping(DICT_PATH);
		
		// Split observation sequence data-set into training and testing data.
		int[][] trainingData = Arrays.copyOfRange(Os, 0, Os.length - numTestSets);
		int[][] testingData = Arrays.copyOfRange(Os, Os.length - numTestSets, Os.length);
		
		// Train model with HMM (Baum-Welch)
		HMM hmm = new HMM(trainingData, N, M);
		smile.sequence.HMM trainedHMM = hmm.solveProblem3(maxIters);
		System.out.println(trainedHMM.toString());
		
		/* =================== TEST DATA ===================== */
		// Test the model.
		System.out.println("");
		System.out.println("=== Testing ===");
		System.out.println("");
		
		// Testing set of base malware family.
		FileWriter csvWriter = new FileWriter(TEST_RESULTS_PATH_BASE, false);	
		// Labels on first line of .csv.
		csvWriter.append("logProb");
		csvWriter.append("\n");
		for (int[] O : testingData) {
			// Printing output.
			double logProbTest = hmm.solveProblem1(O);
			double standardizedLogProbTest = logProbTest / O.length;
			System.out.println("logProbTest: " + logProbTest + " | standardized: " + standardizedLogProbTest);
			// Each line is a new observation sequence's logProb.
			csvWriter.append(standardizedLogProbTest + "");
			csvWriter.append("\n");
		}
		csvWriter.flush();
		csvWriter.close();
		
		// 1st malware family
		int[][] Os1 = s.deserializeDataset(DIFF_DATA_PATH_1);
		// Labels on first line of .csv.
		FileWriter csvWriter1 = new FileWriter(TEST_RESULTS_PATH_1, false);
		csvWriter1.append("logProb");
		csvWriter1.append("\n");
		// Each line is a new observation sequence's logProb.
		for (int[] O : Os1) {
			double logProbTest = hmm.solveProblem1(O);
			double standardizedLogProbTest = logProbTest / O.length;
			csvWriter1.append(standardizedLogProbTest + "");
			csvWriter1.append("\n");
		}
		csvWriter1.flush();
		csvWriter1.close();
		
		// 2nd malware family
		int[][] Os2 = s.deserializeDataset(DIFF_DATA_PATH_2);
		// Labels on first line of .csv.
		FileWriter csvWriter2 = new FileWriter(TEST_RESULTS_PATH_2, false);
		csvWriter2.append("logProb");
		csvWriter2.append("\n");
		// Each line is a new observation sequence's logProb.
		for (int[] O : Os2) {
			double logProbTest = hmm.solveProblem1(O);
			double standardizedLogProbTest = logProbTest / O.length;
			csvWriter2.append(standardizedLogProbTest + "");
			csvWriter2.append("\n");
		}
		csvWriter2.flush();
		csvWriter2.close();
	}
}
